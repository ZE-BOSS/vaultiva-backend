So now that we have the roadmap, now let's dive into it one by one, and technology by technology, how implementation works. So first of all, we have the authentication. So for authentication flow, the user imputes his or her email. After imputing his or her email, he sends a notification to validate the email. After validating the email, users enter all their user information, which includes name, full name, first name, last name, email, phone number, BVN, N9, address. So all this information the user fills in. After which, the next stage for the user will be to enter their password. So enter their password, confirm password, and full password. The next stage after that will be the user to do a KYC validation, providing like snapping, like doing a live snap of their N9, or their driver's license, or national ID card, or passport photograph, or international passport, or whichever one. So that's phase one. That's for authentication. Also on the authentication, at the point of user being able to register and log in, when the user logs into the application, the user can log in using either phone number and password, email and password, user name and password. After the user is able to log in, the next stage is the user gets a pop-up. So the pop-up is identifying whether the user wants to authenticate using PIN. So now this method of authentication handles transfer, repayment, anything including transaction. And also logging into the app. That's after the user has logged in. Subsequently, when the user opens the application, it just gets a request to enter either PIN or use biometrics like fingerprint, official ID, depending on whichever the system supports. So that's the second stage. After the user is able to enter the dashboard, they're able to enter the dashboard. So on the dashboard, the user is able to see all this information. So now let's start from the first part. So the very most important part will be the payment part. So on the part of the payment, the user is able to add on the wallet part. On the side of the wallet, the user is able to have multiple wallets. So we have different wallets for each services. So we have the main wallet. We have a wallet for airtime, data, TVs, which includes DSTV, GoTV, and the like. We have for electricity. We have for betting, for funding betting accounts. So that is multiple wallet system. Then the user is able to add wallet subsequently, depending on what they want to do, whether it be bill splitting or whatever it is. So that's the wallet system. On the wallet system, the user is able to see the current existing wallet, how much each wallet has, and all that. So for crediting the account, we use bank transfers. We use Providius to handle anything, transfers and holding of funds, transfers. As crediting and debiting wallet, we use Providius. Now that's on the end of wallet systems and transfers and all that. So next we take care of bill payment. So under bill payment, like we spoke initially, the multi-wallet system comes in. One wallet for each bill payment service. So on the bill payment service are six. They include airtime, data, internet, tv, electricity, and bets funding. So that's funding of betting accounts. So basically betting. Under each wallet, we can perform... So for each bill payment, how it works is the service we use in handling bill payment is either Flutter Wave or InterSwitch, which is currently available. And... Bill payments are able to perform options such as If a bill payment user receives a bill reminder on plans and they are able to see auto-payments calendar if autosmart refill is enabled and they are able to get bill payments reminder regardless of if autosmart refill is enabled or not bill payment reminder initially goes by how they will be reminded of payment now I purchased a data as a user of a data plan that is supposed to last 7 days so how bill reminder works is a day before the 7th day I get a reminder that I am rolling low on data and on the 7th day I get a reminder that my data has finished so that's for the first stage in a sense where autosmart refill is enabled after the reminder on the 6th day on the 7th day I still get a reminder and my data purchase is automatically refilled I get an automatic data purchase same thing for other bill payment service so aside that that's for the first phase for bill payment reminder and autosmart refill for the second phase the algorithm, because the first phase we don't have data enough data to compare when the user's data will be getting finished or the user's bill payment needs to be refilled so that's for the first day the second one for autosmart refill is we start to observe when the user comes to the duration of time it takes the user so the user buys the plan for 7 days and the user keeps on recharging every 3 days so we move the reminder to 3 days 3 days automaton and we auto refill after 3 days because it's a pattern for the user to purchase that same plan every 3 days so we help the user auto refill at the end of 3 days so that's that for bill payment so that's that for bill payment.So, for the next stage, we have Auto-Transfer and Transfer Scheduling So, for Auto-Transfer, it's still under Wallet Systems and Transfers So, it has Auto-P and Transfer Scheduling So, Auto-P works for both internal wallets, transferring within wallets, inside So, for that, we send from ProVideos to ProVideos So, Auto-Transfer can just be triggered from Main Wallet So, for PayBills, when you want to distribute for Auto-Refill, it's coming from the Main Wallet to the other wallets So, that's for PayBills For Auto-Transfer, it's going from the Main Wallet to another user's Main Wallet or from the Main Wallet to another bank entirely to which the Auto-Transfer has been scheduled for And Auto-Transfer can be a one-time transfer or a reoccurring transfer So, Auto-Transfer can be a one-time transfer or a reoccurring transfer So, I think that sets everything for Transfer Also, after transfers, we get digital receipts And before transfers, we should be able to check if the bank we are trying to transfer to has a downtime before both Normal Transfer and Scheduled Transfer For Scheduled Transfer, if the bank has a downtime, the user is notified that the bank has a downtime and is delayed The Scheduled Transfer is delayed For Normal Transfer, the user is notified that the bank has a downtime and is given the option to book a transfer So, that's basically for transparency There should also be APIs to stipulate when different banks or payment services have downtime Downtime should also be implemented for Bill Payment So, at the point of purchasing Bill Payment, the user should be told if they could purchase the Bill Payment or they could not or the Bill Payment has a downtime or not So, I think that can do Transfer outside the user's Wallet or to another user's Wallet or to another bank entirely So, that can do everything on Transfer. So the next thing we'll speak about is bill splitting. Under bill splitting we have two types, we have one to many and many to one. Before we go into bill splitting, one thing we need to take note of is that users are able to lock funds while creating wallets. So automatically when the user account is created, a new wallet is created and wallets are created for each paybill service and there's a time, data, electricity, etc. And each wallet is created for each service, there's the six paybill service, each service wallet is created for. Then automatically a wallet is created for escrow and automatically a wallet is created for, um, okay, so I think those are all the major wallets that are to be created. Next, users say these are the main wallets, so these wallets could can adjust associated services and could not be used for things like bill splitting, shared wallets, and crowdfunding, crowdfunding a bill, those wallets could not be used for things like that. Basically, users are expected to create new wallets, so at the point of creating new wallets, user can choose to either lock the funds on those wallets, or lock funds entering those wallets for a specific duration of time. So, um, then that's that on, um, creation of wallets. Um, what else am I missing? Okay, secondly, secondly, um, on bill splitting we have two types, we have one to many and many to one. So, one to many means, um, money is going from one wallet to multiple other wallets. Um, many to one means money is coming from multiple wallets to one single wallet. So, on one to many, um, a wallet will be created, a wallet will be selected or created if no wallet is available, um, for handling the bill splitting, and, um, that one wallet will, money will be used on a specified time frame, how often or how. So, for bill splitting, we also have one time bill splitting, so it's like scheduling a time for, um, sending out bill, like payment or salary, that is one to many payment or salary, it could be one time, or it could be, um, reoccurring, whereas it's, um, a reoccurring bill splitting. Then for many to one, same thing, one time or reoccurring, where users will be invited. So, users that are going to be involved in bill splitting will be invited to that bill splitting channel, and if they accept the, the, um, bill splitting, they are allowed in, they will select the wallets in which they will receive funds, if they are the receiver of funds, or they would send funds from, if they are the senders of funds. So, um, then they get auto reminders, if the sender gets an auto reminder, if they've not, the person has not sent a particular fund. So, that's all on bill splitting. Um, next we have escrow. So, escrow has been explained in detail in the previous, um, document. So, we have one time escrow, reoccurring escrow, and each has both single escrow or group escrow. So, then we are able to get a digital receipt for those escrow. So, um, I think, yeah, bank down time, so that's on transfers. So, it's similar to escrow, since money will be, um, will be transferred from one user wallet to the other. So, she will also be able, the user should also be able to get notified when there's a down time. Um, um, crowdfunding. So, um, for crowdfunding, user obviously creates a bill payment for it, a wallet system for it, so not a bill payment. User create a wallet system for it and select, um, the option for crowdfunding so that you can share a billing link for friends and family to fund the account through the wallet. So, user, the friends and family have to have whatever accounts to fund the user crowdfunding wallet. Um, next we have the shared wallet. So, um, like a family account where, um, a wallet system is created and multiple users are invited to perform actions on that same wallet. So, users are able to, um, send money from the same wallet or debit money. So, like, an account involving multiple users. But the catch to this is there are two options where users are able to automatically perform actions on that wallet where they can automatically debit from the wallet or credit the wallet. Or users, um, have need signatories, like everybody have to, those involved in the account have to sign, sign that, sign off on the debit or credit or whatever actions is to be performed on the account. So, they have to authorize the action to be performed. Um, so, yes, does that on shared wallet. So, last but not the least is AI Spending Insights. So, AI Spending Insights basically, um, integrates an AI, an NNM models API, and what it does is, what it does is, it's, um, it's, it's being fed data like user spending, um, breakdown on user's transaction, what their monthly transaction was, daily transaction, weekly transaction, depending on whatever has been selected. And that's, those information are being fed into the NNM model to get back feedback on how best to, um, how best to, um, to reduce either spending or optimize, um, optimize budgeting. So, just giving information on how they can better their spending and all. So, then we have the reward and cashback engine. So, the reward and cashback engine or discount, um, or streaks or bill payment streaks, um, streak reward, um, be done mostly on bill payments or the reward engine is strictly on bill payment, um, cashbacks, um, discounts, giving five streaks strictly on bill payments. Um, then, um, things like, um, offline USSD push to enable, um, USSD assistance and voice phased payment would be, um, upcoming update. They could just be put there as, um, updates to be made. Um, last but not the least, um, a ledger system is required, a robust, complex ledger system that handles payments, um, kind of a source of truth for different, for how transaction is being carried out on the application. Um, it's handles both for inter switch, flutter, wave, and, um, providers. So, it's a common source of truth where, um, all implement, transactions carried out can be easily traced by the admin and, um, where transactions are not balanced, they can, the issues can easily be found and those transactions could be balanced out. So, that's basically what it entails.